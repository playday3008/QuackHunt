@startuml gun_logic

actor "User" as user
participant "Controller" as controller
participant "Button" as button
participant "LED" as led
participant "RGB Sensor" as rgb_sensor
participant "UART" as uart
participant "LCD Display" as lcd

== Setup ==
user -> controller: Power Up
activate controller
activate controller
controller -> controller: Initialize global variables
activate button
activate button
activate led
activate led
activate rgb_sensor
activate rgb_sensor
controller -> uart: Initialize UART with 74880 baud rate
activate uart
activate uart
controller -> lcd: Initialize LCD with RGB backlight as white
activate lcd
activate lcd
controller -> controller: Initialize File System
group Wi-Fi Subroutine
    controller -> controller: Get Wi-Fi credentials from File System
    controller -> controller: Check if Wi-Fi credentials are valid
    alt Wi-Fi credentials are valid
        controller -> lcd: Show connection progress
        controller -> controller: Connect to Wi-Fi
        alt Wi-Fi connection failed
            controller -> controller: Go to Wi-Fi Portal Setup
        end
    end
    user --> button: Press button
    controller <- button: Read button state
    alt Wi-Fi is not connected || Wi-Fi credentials are not valid || Button is pressed
        controller -> controller: Launch Wi-Fi Portal Setup
        controller -> controller: Get Wi-Fi credentials from Wi-Fi Portal Setup
        controller -> controller: Save Wi-Fi credentials to File System
        controller -> controller: Reboot
        deactivate rgb_sensor
        deactivate led
        deactivate button
        deactivate lcd
        deactivate uart
        deactivate controller
    end
end
group WebSocket Subroutine
    controller -> controller: Launch WebSocket
    controller -> controller: Setup WebSocket callbacks
    group WebSocket Callbacks
        group On WebSocket connected
            controller -> controller: Assign connection ID to global variable
            controller -> led: Turn on LED
            controller -> controller: Send WebSocket message with hardware specs
        end
        group On WebSocket message received
            controller -> lcd: Show received message
        end
    end
end

== Main Loop ==
controller -> controller: WebSocket Tick
controller -> controller: Check if WebSocket is connected
alt WebSocket is not connected
    controller -> led: Blink LED
end
user --> button: Press/Hold button (Shoot)
controller <- button: Read button state
alt Button is pressed
    controller <- rgb_sensor: Read RGB sensor data
    controller -> controller: Send WebSocket message with color data and shot set to true
else Button is holded
    controller <- rgb_sensor: Read RGB sensor data
    controller -> controller: Send WebSocket message with color data and shot set to false
end
deactivate rgb_sensor
deactivate led
deactivate button
deactivate lcd
deactivate uart
deactivate controller

@enduml